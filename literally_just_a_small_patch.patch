Index: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/LightOrb.java
===================================================================
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/LightOrb.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/LightOrb.java
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/LightOrb.java	(revision d514ddcb73ef831a96933c986a3c1f1f443d28df)
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/LightOrb.java	(revision 9c7d29f203c596ee2eb9ea9dcf0559e5a403d4a0)
@@ -1,58 +1,121 @@
 package com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs;
 
+import com.shatteredpixel.shatteredpixeldungeon.Assets;
+import com.shatteredpixel.shatteredpixeldungeon.Badges;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AscensionChallenge;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Degrade;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invisibility;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Light;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Warlock;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist;
 import com.shatteredpixel.shatteredpixeldungeon.effects.particles.ShadowParticle;
-import com.shatteredpixel.shatteredpixeldungeon.items.Generator;
-import com.shatteredpixel.shatteredpixeldungeon.items.journal.Guidebook;
-import com.shatteredpixel.shatteredpixeldungeon.journal.Document;
+import com.shatteredpixel.shatteredpixeldungeon.mechanics.Ballistica;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
+import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.LightOrbSprite;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
+import com.watabou.noosa.audio.Sample;
 import com.watabou.noosa.tweeners.AlphaTweener;
 import com.watabou.utils.PathFinder;
 import com.watabou.utils.Random;
 
 public class LightOrb extends Mob {
 
+        private static final float TIME_TO_ZAP	= 1f;
+
         {
                 spriteClass = LightOrbSprite.class;
 
-                HP = HT = 4;
-                defenseSkill = 25;
+                HP = HT = 1 ;
+                defenseSkill = 1000;
 
-                EXP = 2;
-                maxLvl = 7;
-
-                loot = Generator.Category.SEED;
-                lootChance = 0.25f;
+                alignment = Alignment.ALLY;
         }
 
         @Override
         public int damageRoll() {
-                return Random.NormalIntRange( 1, 4 );
+                return Random.NormalIntRange( 12, 18 );
         }
 
         @Override
         public int attackSkill( Char target ) {
-                return 10;
+                return 25;
         }
-
-        private static int dodges = 0;
 
         @Override
-        public String defenseVerb() {
-                dodges++;
-                if (dodges >= 2 && !Document.ADVENTURERS_GUIDE.isPageRead(Document.GUIDE_SURPRISE_ATKS)){
-                        GLog.p(Messages.get(Guidebook.class, "hint"));
-                        GameScene.flashForDocument(Document.ADVENTURERS_GUIDE, Document.GUIDE_SURPRISE_ATKS);
-                        dodges = 0;
-                }
-                return super.defenseVerb();
+        public int drRoll() {
+                return Random.NormalIntRange(0, 8);
+        }
+
+        @Override
+        protected boolean canAttack( Char enemy ) {
+                return new Ballistica( pos, enemy.pos, Ballistica.MAGIC_BOLT).collisionPos == enemy.pos;
         }
+
+        protected boolean doAttack( Char enemy ) {
+
+                if (Dungeon.level.adjacent( pos, enemy.pos )) {
+
+                        return super.doAttack( enemy );
+
+                } else {
+
+                        if (sprite != null && (sprite.visible || enemy.sprite.visible)) {
+                                sprite.zap( enemy.pos );
+                                return false;
+                        } else {
+                                zap();
+                                return true;
+                        }
+                }
+        }
+
+        //used so resistances can differentiate between melee and magical attacks
+        public static class DarkBolt{}
+
+        protected void zap() {
+                spend( 1f );
+
+                Invisibility.dispel(this);
+                if (hit( this, enemy, true )) {
+
+                        enemy.damage( Random.NormalIntRange(10, 20), new YogFist.DarkFist.DarkBolt() );
+
+                        Light l = enemy.buff(Light.class);
+                        if (l != null){
+                                l.weaken(50);
+                        }
+
+                        if (!enemy.isAlive() && enemy == Dungeon.hero) {
+                                Badges.validateDeathFromEnemyMagic();
+                                Dungeon.fail( getClass() );
+                                GLog.n( Messages.get(Char.class, "kill", name()) );
+                        }
+
+                } else {
+
+                        enemy.sprite.showStatus( CharSprite.NEUTRAL,  enemy.defenseVerb() );
+                }
+
+        }
+
+        public void onZapComplete() {
+                zap();
+                next();
+        }
+
+        public void call() {
+                next();
+        }
+
+
+
         public static void spawnNext( int pos ) {
                 for (int n : PathFinder.NEIGHBOURS2) {
                         spawnAtOrb(pos + n);
