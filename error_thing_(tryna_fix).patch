Index: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/LightOrb.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/LightOrb.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/LightOrb.java
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/LightOrb.java	(revision cd432852b60ef21bacae82c990dc37fc293dd21a)
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/LightOrb.java	(revision 0b39587444087a5e1295426de4645d0953f03f42)
@@ -1,5 +1,7 @@
 package com.shatteredpixel.shatteredpixeldungeon.actors.mobs;
 
+import static com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand.zapper;
+
 import com.shatteredpixel.shatteredpixeldungeon.Badges;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
@@ -12,6 +14,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Light;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Belongings;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.DirectableAlly;
+import com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile;
 import com.shatteredpixel.shatteredpixeldungeon.effects.particles.ShadowParticle;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
@@ -22,6 +25,11 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfPsionicBlast;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave;
+import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfCorrosion;
+import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfCorruption;
+import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfFireblast;
+import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfFrost;
+import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfMagicMissile;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon;
 import com.shatteredpixel.shatteredpixeldungeon.mechanics.Ballistica;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
@@ -105,10 +113,13 @@
 
                 @Override
         protected boolean canAttack( Char enemy ) {
-                return new Ballistica( pos, enemy.pos, Ballistica.MAGIC_BOLT).collisionPos == enemy.pos;
+
+                        return new Ballistica( pos, enemy.pos, Ballistica.MAGIC_BOLT).collisionPos == enemy.pos;
+
         }
+
 
-        protected boolean doAttack( Char enemy ) {
+        protected boolean doAttack(Char enemy ) {
 
                 if (Dungeon.level.adjacent( pos, enemy.pos )) {
 
@@ -126,23 +137,19 @@
                 }
         }
         protected void zap() {
-                spend( 1f );
-
-                Invisibility.dispel(this);
-                if (hit( this, enemy, true )) {
-
-                        enemy.damage( Random.NormalIntRange(10, 20), new YogFist.DarkFist.DarkBolt() );
+                if (LightOrb.wand != null ){
+                        Wand.lightorbwand( this );
+                }
+                else {
+                        spend(1f);
+                        Invisibility.dispel(this);
+                        if (hit(this, enemy, true)) {
+                                enemy.damage(Random.NormalIntRange(10, 20), new YogFist.DarkFist.DarkBolt());
 
-                        Light l = enemy.buff(Light.class);
-                        if (l != null){
-                                l.weaken(50);
-                        }
-
-                } else {
-
-                        enemy.sprite.showStatus( CharSprite.NEUTRAL,  enemy.defenseVerb() );
+                        } else {
+                                enemy.sprite.showStatus(CharSprite.NEUTRAL, enemy.defenseVerb());
+                        }
                 }
-
         }
 
         public void onZapComplete() {
@@ -242,33 +249,24 @@
                                 @Override
                                 protected void onClick() {
 
+                                }
+                        };
+
+                        RedButton direct = new RedButton( Messages.get(this, "direct") ) {
+                                @Override
+                                protected void onClick() {
+                                        zap();
                                 }
-                        };
 
-//                        RedButton direct = new RedButton( Messages.get(this, "direct") ) {
-//                                @Override
-//                                protected void onClick() {
-//                                        if (orb == null && orbID != 0){
-//                                                Actor a = Actor.findById(orbID);
-//                                                if (a != null){
-//                                                        orb = (LightOrb)a;
-//                                                } else {
-//                                                        orbID = 0;
-//                                                }
-//                                        }
-//                                        if (orb != null) GameScene.selectCell(ghostDirector);
 
-//                                }
-
-
-//                        };
+                        };
 
                         btnorb1.setRect( 0, GAP - 2 , WIDTH, BTN_HEIGHT );
                         move.setRect( 0, (int)btnorb1.bottom() + GAP, WIDTH, BTN_HEIGHT );
-//                        direct.setRect( 0, (int)move.bottom() + GAP, WIDTH, BTN_HEIGHT );
+                        direct.setRect( 0, (int)move.bottom() + GAP, WIDTH, BTN_HEIGHT );
                         add( btnorb1 );
                         add( move );
-//                        add( direct );
+                         add( direct );
 
                         resize( WIDTH, 64 );
                 }
@@ -278,7 +276,6 @@
         public static class WndOrbOutfit extends Window {
 
                 private static final int WIDTH      = 120;
-                private static final int BTN_HEIGHT = 20;
                 private static final int GAP        = 2;
                 private static final int BTN_SIZE	= 32;
 
Index: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java	(revision cd432852b60ef21bacae82c990dc37fc293dd21a)
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java	(revision 0b39587444087a5e1295426de4645d0953f03f42)
@@ -39,6 +39,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroSubClass;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.mage.WildMagic;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.LightOrb;
 import com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TalismanOfForesight;
@@ -385,6 +386,10 @@
 		particle.radiateXY(0.5f);
 	}
 
+	public void lightorbwand(LightOrb orb, Ballistica bolt){
+
+	}
+
 	protected void wandUsed() {
 		if (!isIdentified()) {
 			float uses = Math.min( availableUsesToID, Talent.itemIDSpeedFactor(Dungeon.hero, this) );
@@ -573,7 +578,7 @@
 		}
 	}
 	
-	protected static CellSelector.Listener zapper = new  CellSelector.Listener() {
+		public static CellSelector.Listener zapper = new  CellSelector.Listener() {
 		
 		@Override
 		public void onSelect( Integer target ) {
Index: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfFireblast.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfFireblast.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfFireblast.java
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfFireblast.java	(revision cd432852b60ef21bacae82c990dc37fc293dd21a)
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfFireblast.java	(revision 0b39587444087a5e1295426de4645d0953f03f42)
@@ -32,6 +32,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Cripple;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Paralysis;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.mage.WildMagic;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.LightOrb;
 import com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Blazing;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MagesStaff;
@@ -215,4 +216,59 @@
 		particle.shuffleXY( 1.5f );
 	}
 
+	@Override
+	public void lightorbwand(LightOrb orb, Ballistica bolt){
+
+		ArrayList<Char> affectedChars = new ArrayList<>();
+		ArrayList<Integer> adjacentCells = new ArrayList<>();
+		for( int cell : cone.cells ){
+
+			//ignore caster cell
+			if (cell == bolt.sourcePos){
+				continue;
+			}
+
+			//knock doors open
+			if (Dungeon.level.map[cell] == Terrain.DOOR){
+				Level.set(cell, Terrain.OPEN_DOOR);
+				GameScene.updateMap(cell);
+			}
+
+			//only ignite cells directly near caster if they are flammable or solid
+			if (Dungeon.level.adjacent(bolt.sourcePos, cell)
+					&& !(Dungeon.level.flamable[cell] || Dungeon.level.solid[cell])){
+				adjacentCells.add(cell);
+				//do burn any heaps located here though
+				if (Dungeon.level.heaps.get(cell) != null){
+					Dungeon.level.heaps.get(cell).burn();
+				}
+			} else {
+				GameScene.add( Blob.seed( cell, 1+chargesPerCast(), Fire.class ) );
+			}
+
+			Char ch = Actor.findChar( cell );
+			if (ch != null) {
+				affectedChars.add(ch);
+			}
+		}
+
+		//if wand was shot right at a wall
+		if (cone.cells.isEmpty()){
+			adjacentCells.add(bolt.sourcePos);
+		}
+
+		//ignite cells that share a side with an adjacent cell, are flammable, and are closer to the collision pos
+		//This prevents short-range casts not igniting barricades or bookshelves
+		for (int cell : adjacentCells){
+			for (int i : PathFinder.NEIGHBOURS8){
+				if (Dungeon.level.trueDistance(cell+i, bolt.collisionPos) < Dungeon.level.trueDistance(cell, bolt.collisionPos)
+						&& Dungeon.level.flamable[cell+i]
+						&& Fire.volumeAt(cell+i, Fire.class) == 0){
+					GameScene.add( Blob.seed( cell+i, 1+chargesPerCast(), Fire.class ) );
+				}
+			}
+		}
+
+	}
+
 }
Index: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MagesStaff.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MagesStaff.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MagesStaff.java
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MagesStaff.java	(revision cd432852b60ef21bacae82c990dc37fc293dd21a)
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MagesStaff.java	(revision 0b39587444087a5e1295426de4645d0953f03f42)
@@ -114,7 +114,7 @@
 			actions.add( AC_ZAP );
 		}
 		if (Dungeon.hero.subClass == HeroSubClass.LIGHTBENDER){
-			actions.add(AC_ORBS);
+//			actions.add(AC_ORBS);
 		}
 		return actions;
 	}
